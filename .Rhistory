library("swirl")
swirl()
install_course("Statistical Inference")
swirl()
1 - (2+1)/36
deck
52
4/52
1/52*1/51*1/50*1/49*1/48
12/52
11/51*12/51
3/52
3/51
2/51
install.packages(c("backports", "BH", "broom", "callr", "cli", "digest", "dplyr", "fansi", "farver", "forcats", "fs", "ggplot2", "glue", "hms", "jsonlite", "knitr", "lifecycle", "lubridate", "mime", "modelr", "plyr", "prettyunits", "processx", "ps", "Rcpp", "reshape2", "rlang", "rmarkdown", "rstudioapi", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "cli", "digest", "dplyr", "fansi", "farver", "forcats", "fs", "ggplot2", "glue", "hms", "jsonlite", "knitr", "lifecycle", "lubridate", "mime", "modelr", "plyr", "prettyunits", "processx", "ps", "Rcpp", "reshape2", "rlang", "rmarkdown", "rstudioapi", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "cli", "digest", "dplyr", "fansi", "farver", "forcats", "fs", "ggplot2", "glue", "hms", "jsonlite", "knitr", "lifecycle", "lubridate", "mime", "modelr", "plyr", "prettyunits", "processx", "ps", "Rcpp", "reshape2", "rlang", "rmarkdown", "rstudioapi", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "cli", "digest", "dplyr", "fansi", "farver", "forcats", "fs", "ggplot2", "glue", "hms", "jsonlite", "knitr", "lifecycle", "lubridate", "mime", "modelr", "plyr", "prettyunits", "processx", "ps", "Rcpp", "reshape2", "rlang", "rmarkdown", "rstudioapi", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "cli", "digest", "dplyr", "fansi", "farver", "forcats", "fs", "ggplot2", "glue", "hms", "jsonlite", "knitr", "lifecycle", "lubridate", "mime", "modelr", "plyr", "prettyunits", "processx", "ps", "Rcpp", "reshape2", "rlang", "rmarkdown", "rstudioapi", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "cli", "digest", "dplyr", "fansi", "farver", "forcats", "fs", "ggplot2", "glue", "hms", "jsonlite", "knitr", "lifecycle", "lubridate", "mime", "modelr", "plyr", "prettyunits", "processx", "ps", "Rcpp", "reshape2", "rlang", "rmarkdown", "rstudioapi", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "cli", "digest", "dplyr", "fansi", "farver", "forcats", "fs", "ggplot2", "glue", "hms", "jsonlite", "knitr", "lifecycle", "lubridate", "mime", "modelr", "plyr", "prettyunits", "processx", "ps", "Rcpp", "reshape2", "rlang", "rmarkdown", "rstudioapi", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "xml2", "yaml"))
install.packages(c("digest", "fansi", "glue", "rlang", "stringi", "testthat", "yaml"))
install.packages("installr")
library("installr")
updateR
updateR()
20*0.5*0.5^19
20*0.5*0.5^19 + 190*0.5^2*0.5^18 + 1140*0.5^3*0.5^17 + 4845 * 0.5^4 * 0.5^16 + 1*0.5^0 * 0.5^20
sum(dbinom(x = 0:4, size = 20, prob = 0.5))
p <- seq(0.1, 0.9, 0.1)
p
likelihood <- dbinom(4, 20, 9)
likelihood <- dbinom(4, 20, 9)
likelihood <- dbinom(4, 20, p)
likelihood
likelihood <- dbinom(4, 20, 0.5)
dbinom(1:5, 5, 0.1)
sum(dbinom(1:5, 5, 0.1))
library(swirl)
swirl()
?Devices
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cut()
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
?dri
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
state$region
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
data <- read.csv(file = "household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = c("NA", "?"),
stringsAsFactors = FALSE)
dev.off()
setwd("C:/Users/Mohamed-Meguid/my_dir/Courses/r_exploratory_data_analysis/week1")
data <- read.csv(file = "household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = c("NA", "?"),
stringsAsFactors = FALSE)
View(data)
data$DateTime <- paste(data$Date, data$Time)
str(data)
data$DateTime <- strptime(data$DateTime, format = "%d/%m/%Y %H:%M:%S")
head(data)
View(data)
data <- read.csv(file = "household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = c("NA", "?"),
stringsAsFactors = FALSE)
head(data)
str(data)
data$Date <- as.Date(data$Date)
View(data)
?as.Date
data <- read.csv(file = "household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = c("NA", "?"),
stringsAsFactors = FALSE)
View(data)
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
View(data)
as.Date(c("2007-02-01", "2007-02-01"))
data <- data[data$Date %in% as.Date(c("2007-02-01", "2007-02-01"))]
data <- data[data$Date %in% as.Date(c("2007-02-01", "2007-02-01")), ]
View(data)
data <- read.csv(file = "household_power_consumption.txt",
header = TRUE,
sep = ";",
na.strings = c("NA", "?"),
stringsAsFactors = FALSE)
View(data)
data <- data[data$Date %in% c("1/2/2007", "2/2/2007"), ]
data$DateTime <- paste(data$Date, data$Time)
data$DateTime <- strptime(data$DateTime, format = "%d/%m/%Y %H:%M:%S")
View(data)
str(data)
with(data,
plot(x = Global_active_power)
)
?plot
with(data,
plot(x = Global_active_power), type = "h"
)
with(data,
hist(x = Global_active_power)
)
with(data,
hist(x = Global_active_power, fill = "red")
)
with(data,
hist(x = Global_active_power, fill = "r")
)
with(data,
hist(x = Global_active_power, col =  = "r")
)
with(data,
hist(x = Global_active_power, col = "r")
)
with(data,
hist(x = Global_active_power, col = "red")
)
title("Global Active Power")
with(data,
hist(x = Global_active_power, col = "red", main = "Global Active Power")
)
with(data,
hist(x = Global_active_power, col = "red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
)
with(data,
plot(x = Global_active_power, col = "red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
)
with(data,
plot(x = Global_active_power, col = "red",
type = "h",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
)
?plot
with(data,
hist(x = Global_active_power, col = "red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
)
png(filename = "plot1.png")
with(data,
hist(x = Global_active_power, col = "red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
)
dev.cur()
png(filename = "plot1.png")
with(data,
hist(x = Global_active_power, col = "red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
)
dev.off()
setwd("C:/Users/Mohamed-Meguid/my_dir/Courses/r_exploratory_data_analysis/ExData_Plotting1")
png(filename = "plot1.png")
with(data,
hist(x = Global_active_power, col = "red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
)
ddev.off()
dev.off()
png(filename = "figure/plot1.png")
with(data,
hist(x = Global_active_power, col = "red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
)
dev.off()
str(data)
?as.POSIXlt
data$DateTime[1]
data$DateTime[2]
unclass(data$DateTime[2])
with(data,
plot(x = DateTime, y = Global_active_power)
)
# Plot 2 Construction
with(data,
plot(x = DateTime, y = Global_active_power,
type = "l")
)
png(filename = "figure/plot2.png")
with(data,
plot(x = DateTime, y = Global_active_power,
type = "l",
ylab = "Global Active Power (kilowatts)")
)
dev.off()
?plot
with(data,
plot(x = DateTime, y = Global_active_power,
type = "l",
xlab = NULL,
ylab = "Global Active Power (kilowatts)")
)
with(data,
plot(x = DateTime, y = Global_active_power,
type = "l",
xlab = "",
ylab = "Global Active Power (kilowatts)")
)
png(filename = "figure/plot2.png")
with(data,
plot(x = DateTime, y = Global_active_power,
type = "l",
xlab = "",
ylab = "Global Active Power (kilowatts)")
)
dev.off()
?png
png(filename = "figure/plot1.png", height = 480, width = 480, units = "px")
with(data,
hist(x = Global_active_power, col = "red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
)
dev.off()
png(filename = "figure/plot2.png", height = 480, width = 480, units = "px")
with(data,
plot(x = DateTime, y = Global_active_power,
type = "l",
xlab = "",
ylab = "Global Active Power (kilowatts)")
)
dev.off()
str(data)
with(data,
plot(x = DateTime, y = Sub_metering_1,
type = "l",
ylab = "Energy sub metering")
)
with(data,
plot(x = DateTime, y = Sub_metering_1,
type = "l",
col = "black"
ylab = "Energy sub metering")
)
with(data,
plot(x = DateTime, y = Sub_metering_1,
type = "l",
col = "black",
ylab = "Energy sub metering")
)
with(data,
plot(x = DateTime, y = Sub_metering_2,
type = "l",
col = "red"
)
)
with(data,
plot(x = DateTime, y = Sub_metering_1,
type = "l",
col = "black",
ylab = "Energy sub metering")
)
with(data,
line(x = DateTime, y = Sub_metering_2,
col = "red"
)
)
?line
with(data,
lines(x = DateTime, y = Sub_metering_2,
col = "red"
)
)
?lines
with(data,
lines(x = DateTime, y = Sub_metering_3,
col = "blue"
)
)
?legend
legend()
legend("topright")
legend("topright",
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col = c("black", "red", "blue"))
legend("topright",
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col = c("black", "red", "blue"),
lty = 1)
png(filename = "figure/plot3.png", height = 480, width = 480, units = "px")
with(data,
plot(x = DateTime, y = Sub_metering_1,
type = "l",
col = "black",
ylab = "Energy sub metering")
)
with(data,
lines(x = DateTime, y = Sub_metering_2,
col = "red"
)
)
with(data,
lines(x = DateTime, y = Sub_metering_3,
col = "blue"
)
)
legend("topright",
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col = c("black", "red", "blue"),
lty = 1)
dev.off()
png(filename = "figure/plot3.png", height = 480, width = 480, units = "px")
with(data,
plot(x = DateTime, y = Sub_metering_1,
type = "l",
col = "black",
xlab = "",
ylab = "Energy sub metering")
)
with(data,
lines(x = DateTime, y = Sub_metering_2,
col = "red"
)
)
with(data,
lines(x = DateTime, y = Sub_metering_3,
col = "blue"
)
)
legend("topright",
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col = c("black", "red", "blue"),
lty = 1)
dev.off()
?par
par(mfcol = c(2, 2))
with(data,
plot(x = Global_active_power, y = DateTime,
type = "l",
ylab = "Global Active Power",
xlab = "")
)
par(mfrow = c(2, 2))
with(data,
plot(x = Global_active_power, y = DateTime,
type = "l",
ylab = "Global Active Power",
xlab = "")
)
par(mfrow = c(2, 2))
with(data,
plot(x = Global_active_power, y = DateTime,
type = "l",
ylab = "Global Active Power",
xlab = "")
)
par(mfrow = c(2, 2))
with(data,
plot(x = Global_active_power, y = DateTime,
type = "l",
ylab = "Global Active Power",
xlab = "")
)
with(data,
plot(x = Global_active_power, y = DateTime,
type = "l",
ylab = "Global Active Power",
xlab = "")
)
with(data,
plot(x = Global_active_power, y = DateTime,
type = "l",
ylab = "Global Active Power",
xlab = "")
)
with(data,
plot(x = Global_active_power, y = DateTime,
type = "l",
ylab = "Global Active Power",
xlab = "")
)
with(data,
plot(x = Global_active_power, y = DateTime,
type = "l",
ylab = "Global Active Power",
xlab = "")
)
with(data,
plot(x = Global_active_power, y = DateTime,
type = "l",
ylab = "Global Active Power",
xlab = "")
)
